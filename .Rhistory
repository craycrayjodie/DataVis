demo()
help()
install.packages("ggplot2")
install.packages("dplyr")
install.packages("nycflights13")
install.packages("knitr")
library(ggplot2)
library(dplyr)
library(nycflights13)
library(knitr)
flights
View(flights)
glimpse(flights)
kable(airlines)
airlines$name
glimpse(airports)
view(airports)
View(airports)
View(flights)
?flights
?airports
library(nycflights13)
library(ggplot2)
library(dplyr)
alaska_flights <- flights %>%
filter(carrier == "AS")
View(alaska_flights)
ggplot(data=alaska_flights, mapping=aes(x=dep_delay, y=arr_delay)) + geom_point()
View(weather)
glimpse(weather)
ggplot(data=alaska_flights, mapping=aes(x=air_time, y=distance)) + geom_point()
ggplot(data=alaska_flights, mapping=aes(x=distance, y=air_time)) + geom_point()
ggplot(data=alaska_flights, mapping=aes(x=distance, y=minutes)) + geom_point()
ggplot(data=alaska_flights, mapping=aes(x=distance, y=minute)) + geom_point()
ggplot(data=alaska_flights, mapping=aes(x=distance, y=dep_delay)) + geom_point()
ggplot(data=alaska_flights, mapping=aes(x=dep_time, y=dep_delay)) + geom_point()
ggplot(data = alaska_flights, mapping = aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.2)
ggplot(data = alaska_flights, mapping = aes(x = dep_delay, y = arr_delay)) +
geom_jitter(width = 30, height = 30)
ggplot(data = alaska_flights, mapping = aes(x = dep_delay, y = arr_delay)) +
geom_point(alpha = 0.2)
glimpse(weather)
?weather
early_january_weather <- weather %>%
filter(origin == "EWR" & month ==1 & day <= 15)
View(early_january_weather)
ggplot(data = early_january_weather,
mapping = aes(x = time_hour, y = temp)) +
geom_line()
ggplot(data = early_january_weather,
mapping = aes(x = time_hour, y = humid)) +
geom_line()
ggplot(data = early_january_weather,
mapping = aes(x = time_hour, y = dewp)) +
geom_line()
ggplot(data = early_january_weather,
mapping = aes(x = time_hour, y = wind_speed)) +
geom_line()
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram()
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(color = "white")
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(color = "white", fill = "steelblue")
colors()
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(color = "white", fill = "yellowgreen")
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(bins = 40, color = "yellowgreen")
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(bins = 40, color = "white")
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(binwidth = 5, color = "white") +
facet_wrap(~ month)
ggplot(data = weather, mapping = aes(x = temp)) +
geom_histogram(binwidth = 5, color = "white") +
facet_wrap(~ month, nrow = 4)
ggplot(data = weather, mapping = aes(x = month, y = temp)) +
geom_boxplot()
ggplot(data = weather, mapping = aes(x = factor(month), y = temp)) +
geom_boxplot()
fruits <- tibble(
fruit = c("apple", "apple", "orange", "apple", "orange")
)
fruits_counted <- tibble(
fruit = c("apple", "orange"),
number = c(3, 2)
)
ggplot(data = fruits, mapping = aes(x = fruit)) +
geom_bar()
View(fruits)
View(fruits_counted)
ggplot(data = flights, mapping = aes(x = carrier)) +
geom_bar()
ggplot(data = flights, mapping = aes(x = carrier, y=number)) +
geom_col()
ggplot(data = flights, mapping = aes(x = carrier, y = number)) +
+     geom_col()
# Segment 1:
ggplot(data = flights, mapping = aes(x = carrier)) +
geom_bar()
# Segment 2:
ggplot(flights, aes(x = carrier)) +
geom_bar()
portland_flights <- flights %>%
filter(dest == "PDX")
View(portland_flights)
btv_sea_flights_fall <- flights %>%
filter(origin == "JFK" & (dest == "BTV" | dest == "SEA") & month >= 10)
View(btv_sea_flights_fall)
summary_temp <- weather %>%
summarize(mean = mean(temp), std_dev = sd(temp))
summary_temp
summary_temp <- weather %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE))
summary_temp
summary_temp <- weather %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE), count())
summary_temp
summary_temp <- weather %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE), count = n())
summary_temp
summary_temp <- weather %>%
summarize(mean = mean(temp, na.rm = TRUE)) %>%
summarize(std_dev = sd(temp, na.rm = TRUE))
summary_temp <- weather %>%
summarize(mean = mean(temp, na.rm = TRUE))
View(summary_temp)
summary_monthly_temp <- weather %>%
group_by(month) %>%
summarize(mean = mean(temp, na.rm = TRUE),
std_dev = sd(temp, na.rm = TRUE))
summary_monthly_temp
diamonds
diamonds %>%
group_by(cut)
diamonds %>%
group_by(cut) %>%
summarize(avg_price = mean(price))
by_origin_monthly <- flights %>%
group_by(month, origin) %>%
summarize(count = n())
by_origin_monthly
View(by_origin_monthly)
weather <- weather %>%
mutate(temp_in_C = (temp - 32) / 1.8)
View(weather)
summary_monthly_temp <- weather %>%
group_by(month) %>%
summarize(mean_temp_in_F = mean(temp, na.rm = TRUE),
mean_temp_in_C = mean(temp_in_C, na.rm = TRUE))
summary_monthly_temp
flights <- flights %>%
mutate(gain = dep_delay - arr_delay)
gain_summary <- flights %>%
summarize(
min = min(gain, na.rm = TRUE),
q1 = quantile(gain, 0.25, na.rm = TRUE),
median = quantile(gain, 0.5, na.rm = TRUE),
q3 = quantile(gain, 0.75, na.rm = TRUE),
max = max(gain, na.rm = TRUE),
mean = mean(gain, na.rm = TRUE),
sd = sd(gain, na.rm = TRUE),
missing = sum(is.na(gain))
)
gain_summary
View(airlines)
flights_joined <- flights %>%
inner_join(airlines, by = "carrier")
View(flights)
View(flights_joined)
View(nycflights13)
?flights
View(weather)
View(planes)
flights_joined <- flights %>%
inner_join(planes, by = "tailnum")
View(flights)
View(flights_joined)
?flights
flights_joined <- flights_joined %>%  mutate(total_seats_per_flight = distance x seats)
flights_joined <- flights %>%
mutate(total_seat_miles = seats * distance)
View(flights_joined)
addinslist:::addinslistAddin()
install_github("kieranjmartin/viewenhance")
library(devtools)
install_github("kieranjmartin/viewenhance")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("kieranjmartin/viewenhance")
library(devtools)
install_github("kieranjmartin/viewenhance")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("kieranjmartin/viewenhance")
install.packages("devtools")
library(devtools)
install_github("kieranjmartin/viewenhance")
sudo apt-get update
sudo apt-get install r-base r-base-dev
sudo apt-get update
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages(c("backports", "broom", "cli", "clipr", "cpp11", "data.table", "digest", "Formula", "kableExtra", "KernSmooth", "knitr", "labeling", "lme4", "MASS", "mgcv", "nlme", "openssl", "openxlsx", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rmarkdown", "statmod", "stringi", "survival", "tibble", "tinytex", "vctrs", "xfun"))
install.packages("devtools")
library(funModeling)
library(dplyr)
library(reshape2)
library(gridExtra)
library(ggpubr)
library(Hmisc)
library(GGally)
library(ggplot2)
library(reshape2)
library(esquisse)
library(lubridate)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(tmap)
library(ggmap)
library(maps)
library(sp)
library(rgeos)
library(maptools)
library(leaflet)
library(lubridate)
library(beeswarm)
library(ggrepel)
library(dlookr)
library(viridis)
library(addinslist)
library(devtools)
library(colourpicker)
library(questionr)
install.packages("radiant")
library(radiant)
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
setwd("D:/RStudio/Projects/Data Vis")
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
radiant:::radiant()
View(r_data)
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
radiant:::radiant()
View(MonthlyS)
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
locations_to_exclude <- c("East Pilbara", "Mansfield", "Naracoorte and Lucindale", "Port Phillip", "Waverley", "Woollahra")
locations_to_exclude <- factor(locations_to_exclude)
myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude)
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
myAusdata_by_month <- myAusdata %>% group_by(polygon_id, polygon_name, month) %>% summarise(AvRelChange = mean(RelativeChange), AvRatio = mean(Ratio))
View(myAusdata_by_month)
radiant:::radiant()
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#these locations have a weak correlation with Relative Change so I'll remove them from the dataset to avoid bias
locations_to_exclude <- c("East Pilbara", "Mansfield", "Naracoorte and Lucindale", "Port Phillip", "Waverley", "Woollahra", "Bayside", "Botany Bay", "Glen Eira", "Manningham", "Mosman", "Nillumbik", "Pittwater", "Prospect", "Surf Coast", "Warringah", "Warrnambool")
locations_to_exclude <- factor(locations_to_exclude)
myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude)
#Refer to README.txt for complete list of data definitions. Of note are these two variables:
#all_day_bing_tiles_visited_relative_change: Positive or negative change in movement relative to baseline
#all_day_ratio_single_tile_users: Positive proportion of users staying put within a single location
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
radiant:::radiant()
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#these locations have a weak correlation with Relative Change so I'll remove them from the dataset to avoid bias
locations_to_exclude <- c("East Pilbara", "Mansfield", "Naracoorte and Lucindale", "Port Phillip", "Waverley", "Woollahra", "Bayside", "Botany Bay", "Glen Eira", "Manningham", "Mosman", "Nillumbik", "Pittwater", "Prospect", "Surf Coast", "Warringah", "Warrnambool", "Golden Plains", "Hobart", "Hornsby", "Ku-ring-gai")
locations_to_exclude <- factor(locations_to_exclude)
myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude & month != "June")
radiant:::radiant()
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#these locations have a weak correlation with Relative Change so I'll remove them from the dataset to avoid bias
locations_to_exclude <- c("East Pilbara", "Mansfield", "Naracoorte and Lucindale", "Port Phillip", "Waverley", "Woollahra", "Bayside", "Botany Bay", "Glen Eira", "Manningham", "Mosman", "Nillumbik", "Pittwater", "Prospect", "Surf Coast", "Warringah", "Warrnambool", "Golden Plains", "Hobart", "Hornsby", "Ku-ring-gai", "Mount Alexander", "Mitchell", "Greater Geelong", "Corangamite", "Bass Coast", "Ballarat")
locations_to_exclude <- factor(locations_to_exclude)
myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude & month != "June")
#Refer to README.txt for complete list of data definitions. Of note are these two variables:
#all_day_bing_tiles_visited_relative_change: Positive or negative change in movement relative to baseline
#all_day_ratio_single_tile_users: Positive proportion of users staying put within a single location
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
radiant:::radiant()
View(r_data)
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#these locations have a weak correlation with Relative Change so I'll remove them from the dataset to avoid bias
#locations_to_exclude <- c("East Pilbara", "Mansfield", "Naracoorte and Lucindale", "Port Phillip", "Waverley", "Woollahra", "Bayside", "Botany Bay", "Glen Eira", "Manningham", "Mosman", "Nillumbik", "Pittwater", "Prospect", "Surf Coast", "Warringah", "Warrnambool", "Golden Plains", "Hobart", "Hornsby", "Ku-ring-gai", "Mount Alexander", "Mitchell", "Greater Geelong", "Corangamite", "Bass Coast", "Ballarat")
#locations_to_exclude <- factor(locations_to_exclude)
#myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude & month != "June")
#Refer to README.txt for complete list of data definitions. Of note are these two variables:
#all_day_bing_tiles_visited_relative_change: Positive or negative change in movement relative to baseline
#all_day_ratio_single_tile_users: Positive proportion of users staying put within a single location
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
radiant:::radiant()
mydata = read.delim("movement-range-2020-10-27.txt", header = TRUE, sep = "\t", dec = ".")
myAusdata = filter(mydata, country=="AUS") #scope of Aus data for this project
myAusdata <- subset(myAusdata, select = -c(polygon_source, baseline_name, baseline_type))
myAusdata$ds <- as.Date(myAusdata$ds) #convert to date format for manipulating
myAusdata <- myAusdata %>%  #add columns for trend analysis
mutate(month = month(ds, label = TRUE, abbr = FALSE), day = weekdays(ds))
myAusdata$polygon_id <- factor(myAusdata$polygon_id)
myAusdata$polygon_name <- factor(myAusdata$polygon_name)
myAusdata$day <- factor(myAusdata$day, levels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
#these locations have a weak correlation with Relative Change so I'll remove them from the dataset to avoid bias
locations_to_exclude <- c("Corangamite", "Golden Plains", "Hobart", "Hornsby", "Ku-ring-gai", "Mosman", "Surf Coast")
locations_to_exclude <- factor(locations_to_exclude)
myAusdata <- myAusdata %>% filter(!polygon_name %in% locations_to_exclude & month != "June" & month != "July" & month != "September"
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
myAusdata_by_month <- myAusdata %>% group_by(polygon_id, polygon_name, month) %>% summarise(AvRelChange = mean(RelativeChange), AvRatio = mean(Ratio))
myAusdata <- myAusdata %>% rename(RelativeChange = all_day_bing_tiles_visited_relative_change, Ratio = all_day_ratio_single_tile_users)
myAusdata_by_month <- myAusdata %>% group_by(polygon_id, polygon_name, month) %>% summarise(AvRelChange = mean(RelativeChange), AvRatio = mean(Ratio))
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
View(myAusdata_by_month)
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp('test')
runApp('test')
runApp('test')
runApp('test')
runApp('MapApp')
runApp()
runApp('MapApp')
install.packages("leafpop")
library(leafpop)
View(myAusdata_by_month)
runApp('MapApp')
runApp('MapApp')
runApp('MapApp')
runApp()
runApp('MapApp')
